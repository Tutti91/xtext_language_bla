/*
 * generated by Xtext
 */
package org.xtext.bot.language.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.bot.language.services.BlaGrammarAccess;

@SuppressWarnings("all")
public class BlaSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BlaGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Click_ClickAtKeyword_1_0_or_ClickAtKeyword_1_2_or_ClickAtKeyword_1_3_or_ClickAtKeyword_1_4_or_ClickatKeyword_1_1;
	protected AbstractElementAlias match_Connect_ConnectKeyword_1_0_or_ConnectKeyword_1_1;
	protected AbstractElementAlias match_IFStatement_ELSEKeyword_4_0_2_or_ElseKeyword_4_0_0_or_ElseKeyword_4_0_1;
	protected AbstractElementAlias match_IFStatement_ELSEKeyword_4_0_2_q_or_ElseKeyword_4_0_0_q_or_ElseKeyword_4_0_1_q;
	protected AbstractElementAlias match_IFStatement_ENDIFKeyword_5_3_or_EndIfKeyword_5_2_or_EndifKeyword_5_0_or_EndifKeyword_5_1;
	protected AbstractElementAlias match_IFStatement_IFKeyword_0_2_or_IfKeyword_0_0_or_IfKeyword_0_1;
	protected AbstractElementAlias match_IFStatement_THENKeyword_2_2_or_ThenKeyword_2_0_or_ThenKeyword_2_1;
	protected AbstractElementAlias match_Notification_NotifyKeyword_1_0_or_NotifyKeyword_1_1;
	protected AbstractElementAlias match_Notification_TOKeyword_3_2_or_ToKeyword_3_0_or_ToKeyword_3_1;
	protected AbstractElementAlias match_Read_ReadAtKeyword_1_0_or_ReadAtKeyword_1_2_or_ReadAtKeyword_1_3_or_ReadAtKeyword_1_4_or_ReadatKeyword_1_1;
	protected AbstractElementAlias match_Start_STARTKeyword_1_2_or_StartKeyword_1_0_or_StartKeyword_1_1;
	protected AbstractElementAlias match_Stop_STOPKeyword_1_2_or_StopKeyword_1_0_or_StopKeyword_1_1;
	protected AbstractElementAlias match_Var_VARKeyword_1_2_or_VarKeyword_1_0_or_VarKeyword_1_1;
	protected AbstractElementAlias match_Wait_WaitKeyword_1_0_or_WaitKeyword_1_1;
	protected AbstractElementAlias match_WhileLoop_ENDLOOPKeyword_4_3_or_EndLoopKeyword_4_2_or_EndloopKeyword_4_0_or_EndloopKeyword_4_1;
	protected AbstractElementAlias match_WhileLoop_LOOPKeyword_2_2_or_LoopKeyword_2_0_or_LoopKeyword_2_1;
	protected AbstractElementAlias match_WhileLoop_WHILEKeyword_0_2_or_WhileKeyword_0_0_or_WhileKeyword_0_1;
	protected AbstractElementAlias match_Write_ATKeyword_3_2_or_AtKeyword_3_0_or_AtKeyword_3_1;
	protected AbstractElementAlias match_Write_WriteKeyword_1_0_or_WriteKeyword_1_1;
	protected AbstractElementAlias match_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q;
	protected AbstractElementAlias match_XBlockExpression_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_XExpressionInClosure_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q;
	protected AbstractElementAlias match_XImportDeclaration_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BlaGrammarAccess) access;
		match_Click_ClickAtKeyword_1_0_or_ClickAtKeyword_1_2_or_ClickAtKeyword_1_3_or_ClickAtKeyword_1_4_or_ClickatKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getClickAccess().getClickAtKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getClickAccess().getClickAtKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getClickAccess().getClickAtKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getClickAccess().getClickAtKeyword_1_4()), new TokenAlias(false, false, grammarAccess.getClickAccess().getClickatKeyword_1_1()));
		match_Connect_ConnectKeyword_1_0_or_ConnectKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConnectAccess().getConnectKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getConnectAccess().getConnectKeyword_1_1()));
		match_IFStatement_ELSEKeyword_4_0_2_or_ElseKeyword_4_0_0_or_ElseKeyword_4_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getELSEKeyword_4_0_2()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getElseKeyword_4_0_0()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getElseKeyword_4_0_1()));
		match_IFStatement_ELSEKeyword_4_0_2_q_or_ElseKeyword_4_0_0_q_or_ElseKeyword_4_0_1_q = new AlternativeAlias(false, false, new TokenAlias(false, true, grammarAccess.getIFStatementAccess().getELSEKeyword_4_0_2()), new TokenAlias(false, true, grammarAccess.getIFStatementAccess().getElseKeyword_4_0_0()), new TokenAlias(false, true, grammarAccess.getIFStatementAccess().getElseKeyword_4_0_1()));
		match_IFStatement_ENDIFKeyword_5_3_or_EndIfKeyword_5_2_or_EndifKeyword_5_0_or_EndifKeyword_5_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getENDIFKeyword_5_3()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getEndIfKeyword_5_2()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getEndifKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getEndifKeyword_5_1()));
		match_IFStatement_IFKeyword_0_2_or_IfKeyword_0_0_or_IfKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getIFKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getIfKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getIfKeyword_0_1()));
		match_IFStatement_THENKeyword_2_2_or_ThenKeyword_2_0_or_ThenKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getTHENKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getThenKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getIFStatementAccess().getThenKeyword_2_1()));
		match_Notification_NotifyKeyword_1_0_or_NotifyKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNotificationAccess().getNotifyKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getNotificationAccess().getNotifyKeyword_1_1()));
		match_Notification_TOKeyword_3_2_or_ToKeyword_3_0_or_ToKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNotificationAccess().getTOKeyword_3_2()), new TokenAlias(false, false, grammarAccess.getNotificationAccess().getToKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getNotificationAccess().getToKeyword_3_1()));
		match_Read_ReadAtKeyword_1_0_or_ReadAtKeyword_1_2_or_ReadAtKeyword_1_3_or_ReadAtKeyword_1_4_or_ReadatKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getReadAccess().getReadAtKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getReadAccess().getReadAtKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getReadAccess().getReadAtKeyword_1_3()), new TokenAlias(false, false, grammarAccess.getReadAccess().getReadAtKeyword_1_4()), new TokenAlias(false, false, grammarAccess.getReadAccess().getReadatKeyword_1_1()));
		match_Start_STARTKeyword_1_2_or_StartKeyword_1_0_or_StartKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStartAccess().getSTARTKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getStartAccess().getStartKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getStartAccess().getStartKeyword_1_1()));
		match_Stop_STOPKeyword_1_2_or_StopKeyword_1_0_or_StopKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStopAccess().getSTOPKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getStopAccess().getStopKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getStopAccess().getStopKeyword_1_1()));
		match_Var_VARKeyword_1_2_or_VarKeyword_1_0_or_VarKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVarAccess().getVARKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getVarAccess().getVarKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getVarAccess().getVarKeyword_1_1()));
		match_Wait_WaitKeyword_1_0_or_WaitKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWaitAccess().getWaitKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getWaitAccess().getWaitKeyword_1_1()));
		match_WhileLoop_ENDLOOPKeyword_4_3_or_EndLoopKeyword_4_2_or_EndloopKeyword_4_0_or_EndloopKeyword_4_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getENDLOOPKeyword_4_3()), new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getEndLoopKeyword_4_2()), new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getEndloopKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getEndloopKeyword_4_1()));
		match_WhileLoop_LOOPKeyword_2_2_or_LoopKeyword_2_0_or_LoopKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getLOOPKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getLoopKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getLoopKeyword_2_1()));
		match_WhileLoop_WHILEKeyword_0_2_or_WhileKeyword_0_0_or_WhileKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getWHILEKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getWhileKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getWhileLoopAccess().getWhileKeyword_0_1()));
		match_Write_ATKeyword_3_2_or_AtKeyword_3_0_or_AtKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWriteAccess().getATKeyword_3_2()), new TokenAlias(false, false, grammarAccess.getWriteAccess().getAtKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getWriteAccess().getAtKeyword_3_1()));
		match_Write_WriteKeyword_1_0_or_WriteKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getWriteAccess().getWriteKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getWriteAccess().getWriteKeyword_1_1()));
		match_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXAnnotationAccess().getLeftParenthesisKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getXAnnotationAccess().getRightParenthesisKeyword_3_2()));
		match_XBlockExpression_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
		match_XExpressionInClosure_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
		match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()));
		match_XImportDeclaration_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getArrayBracketsRule())
			return getArrayBracketsToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getOpSingleAssignRule())
			return getOpSingleAssignToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ArrayBrackets :
	 * 	'[' ']'
	 * ;
	 */
	protected String getArrayBracketsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[]";
	}
	
	/**
	 * terminal INT returns ecore::EInt:
	 * 	'0'..'9' ('0'..'9'|'_')*;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * OpSingleAssign:
	 * 	'='
	 * ;
	 */
	protected String getOpSingleAssignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal STRING: 
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"'? |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"?;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Click_ClickAtKeyword_1_0_or_ClickAtKeyword_1_2_or_ClickAtKeyword_1_3_or_ClickAtKeyword_1_4_or_ClickatKeyword_1_1.equals(syntax))
				emit_Click_ClickAtKeyword_1_0_or_ClickAtKeyword_1_2_or_ClickAtKeyword_1_3_or_ClickAtKeyword_1_4_or_ClickatKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Connect_ConnectKeyword_1_0_or_ConnectKeyword_1_1.equals(syntax))
				emit_Connect_ConnectKeyword_1_0_or_ConnectKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_IFStatement_ELSEKeyword_4_0_2_or_ElseKeyword_4_0_0_or_ElseKeyword_4_0_1.equals(syntax))
				emit_IFStatement_ELSEKeyword_4_0_2_or_ElseKeyword_4_0_0_or_ElseKeyword_4_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_IFStatement_ELSEKeyword_4_0_2_q_or_ElseKeyword_4_0_0_q_or_ElseKeyword_4_0_1_q.equals(syntax))
				emit_IFStatement_ELSEKeyword_4_0_2_q_or_ElseKeyword_4_0_0_q_or_ElseKeyword_4_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_IFStatement_ENDIFKeyword_5_3_or_EndIfKeyword_5_2_or_EndifKeyword_5_0_or_EndifKeyword_5_1.equals(syntax))
				emit_IFStatement_ENDIFKeyword_5_3_or_EndIfKeyword_5_2_or_EndifKeyword_5_0_or_EndifKeyword_5_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_IFStatement_IFKeyword_0_2_or_IfKeyword_0_0_or_IfKeyword_0_1.equals(syntax))
				emit_IFStatement_IFKeyword_0_2_or_IfKeyword_0_0_or_IfKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_IFStatement_THENKeyword_2_2_or_ThenKeyword_2_0_or_ThenKeyword_2_1.equals(syntax))
				emit_IFStatement_THENKeyword_2_2_or_ThenKeyword_2_0_or_ThenKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Notification_NotifyKeyword_1_0_or_NotifyKeyword_1_1.equals(syntax))
				emit_Notification_NotifyKeyword_1_0_or_NotifyKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Notification_TOKeyword_3_2_or_ToKeyword_3_0_or_ToKeyword_3_1.equals(syntax))
				emit_Notification_TOKeyword_3_2_or_ToKeyword_3_0_or_ToKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Read_ReadAtKeyword_1_0_or_ReadAtKeyword_1_2_or_ReadAtKeyword_1_3_or_ReadAtKeyword_1_4_or_ReadatKeyword_1_1.equals(syntax))
				emit_Read_ReadAtKeyword_1_0_or_ReadAtKeyword_1_2_or_ReadAtKeyword_1_3_or_ReadAtKeyword_1_4_or_ReadatKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Start_STARTKeyword_1_2_or_StartKeyword_1_0_or_StartKeyword_1_1.equals(syntax))
				emit_Start_STARTKeyword_1_2_or_StartKeyword_1_0_or_StartKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Stop_STOPKeyword_1_2_or_StopKeyword_1_0_or_StopKeyword_1_1.equals(syntax))
				emit_Stop_STOPKeyword_1_2_or_StopKeyword_1_0_or_StopKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Var_VARKeyword_1_2_or_VarKeyword_1_0_or_VarKeyword_1_1.equals(syntax))
				emit_Var_VARKeyword_1_2_or_VarKeyword_1_0_or_VarKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Wait_WaitKeyword_1_0_or_WaitKeyword_1_1.equals(syntax))
				emit_Wait_WaitKeyword_1_0_or_WaitKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_WhileLoop_ENDLOOPKeyword_4_3_or_EndLoopKeyword_4_2_or_EndloopKeyword_4_0_or_EndloopKeyword_4_1.equals(syntax))
				emit_WhileLoop_ENDLOOPKeyword_4_3_or_EndLoopKeyword_4_2_or_EndloopKeyword_4_0_or_EndloopKeyword_4_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_WhileLoop_LOOPKeyword_2_2_or_LoopKeyword_2_0_or_LoopKeyword_2_1.equals(syntax))
				emit_WhileLoop_LOOPKeyword_2_2_or_LoopKeyword_2_0_or_LoopKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_WhileLoop_WHILEKeyword_0_2_or_WhileKeyword_0_0_or_WhileKeyword_0_1.equals(syntax))
				emit_WhileLoop_WHILEKeyword_0_2_or_WhileKeyword_0_0_or_WhileKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Write_ATKeyword_3_2_or_AtKeyword_3_0_or_AtKeyword_3_1.equals(syntax))
				emit_Write_ATKeyword_3_2_or_AtKeyword_3_0_or_AtKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Write_WriteKeyword_1_0_or_WriteKeyword_1_1.equals(syntax))
				emit_Write_WriteKeyword_1_0_or_WriteKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q.equals(syntax))
				emit_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XBlockExpression_SemicolonKeyword_2_1_q.equals(syntax))
				emit_XBlockExpression_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XExpressionInClosure_SemicolonKeyword_1_1_q.equals(syntax))
				emit_XExpressionInClosure_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q.equals(syntax))
				emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XImportDeclaration_SemicolonKeyword_2_q.equals(syntax))
				emit_XImportDeclaration_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_XParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'click at' | 'clickat' | 'clickAt' | 'Click At' | 'ClickAt'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Click_ClickAtKeyword_1_0_or_ClickAtKeyword_1_2_or_ClickAtKeyword_1_3_or_ClickAtKeyword_1_4_or_ClickatKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'connect' | 'Connect'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Connect_ConnectKeyword_1_0_or_ConnectKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else' | 'Else' | 'ELSE'
	 *
	 * This ambiguous syntax occurs at:
	 *     if=IfExpression ('then' | 'Then' | 'THEN') (ambiguity) else+=Block
	 *     then+=Block (ambiguity) else+=Block
	 */
	protected void emit_IFStatement_ELSEKeyword_4_0_2_or_ElseKeyword_4_0_0_or_ElseKeyword_4_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'else'? | 'Else'? | 'ELSE'?
	 *
	 * This ambiguous syntax occurs at:
	 *     if=IfExpression ('then' | 'Then' | 'THEN') (ambiguity) ('endif' | 'Endif' | 'EndIf' | 'ENDIF') (rule end)
	 *     then+=Block (ambiguity) ('endif' | 'Endif' | 'EndIf' | 'ENDIF') (rule end)
	 */
	protected void emit_IFStatement_ELSEKeyword_4_0_2_q_or_ElseKeyword_4_0_0_q_or_ElseKeyword_4_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'endif' | 'Endif' | 'EndIf' | 'ENDIF'
	 *
	 * This ambiguous syntax occurs at:
	 *     else+=Block (ambiguity) (rule end)
	 *     if=IfExpression ('then' | 'Then' | 'THEN') ('else'? | 'Else'? | 'ELSE'?) (ambiguity) (rule end)
	 *     then+=Block ('else'? | 'Else'? | 'ELSE'?) (ambiguity) (rule end)
	 */
	protected void emit_IFStatement_ENDIFKeyword_5_3_or_EndIfKeyword_5_2_or_EndifKeyword_5_0_or_EndifKeyword_5_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'if' | 'If' | 'IF'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) if=IfExpression
	 */
	protected void emit_IFStatement_IFKeyword_0_2_or_IfKeyword_0_0_or_IfKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'then' | 'Then' | 'THEN'
	 *
	 * This ambiguous syntax occurs at:
	 *     if=IfExpression (ambiguity) ('else' | 'Else' | 'ELSE') else+=Block
	 *     if=IfExpression (ambiguity) ('else'? | 'Else'? | 'ELSE'?) ('endif' | 'Endif' | 'EndIf' | 'ENDIF') (rule end)
	 *     if=IfExpression (ambiguity) then+=Block
	 */
	protected void emit_IFStatement_THENKeyword_2_2_or_ThenKeyword_2_0_or_ThenKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'notify' | 'Notify'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Notification_NotifyKeyword_1_0_or_NotifyKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'to' | 'To' | 'TO'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING (ambiguity) address=STRING
	 */
	protected void emit_Notification_TOKeyword_3_2_or_ToKeyword_3_0_or_ToKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'read at' | 'readat' | 'readAt' | 'Read At' | 'ReadAt'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Read_ReadAtKeyword_1_0_or_ReadAtKeyword_1_2_or_ReadAtKeyword_1_3_or_ReadAtKeyword_1_4_or_ReadatKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'start' | 'Start' | 'START'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Start_STARTKeyword_1_2_or_StartKeyword_1_0_or_StartKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'stop' | 'Stop' | 'STOP'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Stop_STOPKeyword_1_2_or_StopKeyword_1_0_or_StopKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'var' | 'Var' | 'VAR'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_Var_VARKeyword_1_2_or_VarKeyword_1_0_or_VarKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'wait' | 'Wait'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=INT
	 */
	protected void emit_Wait_WaitKeyword_1_0_or_WaitKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'endloop' | 'Endloop' | 'EndLoop' | 'ENDLOOP'
	 *
	 * This ambiguous syntax occurs at:
	 *     doLoop+=Block (ambiguity) (rule end)
	 *     while=IfExpression ('loop' | 'Loop' | 'LOOP') (ambiguity) (rule end)
	 */
	protected void emit_WhileLoop_ENDLOOPKeyword_4_3_or_EndLoopKeyword_4_2_or_EndloopKeyword_4_0_or_EndloopKeyword_4_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'loop' | 'Loop' | 'LOOP'
	 *
	 * This ambiguous syntax occurs at:
	 *     while=IfExpression (ambiguity) ('endloop' | 'Endloop' | 'EndLoop' | 'ENDLOOP') (rule end)
	 *     while=IfExpression (ambiguity) doLoop+=Block
	 */
	protected void emit_WhileLoop_LOOPKeyword_2_2_or_LoopKeyword_2_0_or_LoopKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'while' | 'While' | 'WHILE'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) while=IfExpression
	 */
	protected void emit_WhileLoop_WHILEKeyword_0_2_or_WhileKeyword_0_0_or_WhileKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'at' | 'At' | 'AT'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=STRING (ambiguity) value=STRING
	 */
	protected void emit_Write_ATKeyword_3_2_or_AtKeyword_3_0_or_AtKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'write' | 'Write'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=STRING
	 */
	protected void emit_Write_WriteKeyword_1_0_or_WriteKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     annotationType=[JvmAnnotationType|QualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_XAnnotation___LeftParenthesisKeyword_3_0_RightParenthesisKeyword_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' ')' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 */
	protected void emit_XBlockExpression_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 */
	protected void emit_XExpressionInClosure_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '=>' returnType=JvmTypeReference
	 */
	protected void emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     importedNamespace=QualifiedNameWithWildcard (ambiguity) (rule end)
	 *     importedType=[JvmDeclaredType|QualifiedName] (ambiguity) (rule end)
	 *     memberName=ValidID (ambiguity) (rule end)
	 *     wildcard?='*' (ambiguity) (rule end)
	 */
	protected void emit_XImportDeclaration_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '<' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) 'return' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '<' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
